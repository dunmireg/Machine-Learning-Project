shiny::runApp('Developing-Data-Products-Project')
(19800 - 20000)/(1750/sqrt(14))
xbar = 19800
H0 = 20000
s = 14
n = 1750
tStat <- (xbar - H0)/(s/sqrt(n))
xbar = 19800
H0 = 20000
s = 1750
n = 14
tStat <- (xbar - H0)/(s/sqrt(n))
shiny::runApp('Developing-Data-Products-Project')
shiny::runApp('Developing-Data-Products-Project')
shiny::runApp('Developing-Data-Products-Project')
shiny::runApp('Developing-Data-Products-Project')
shiny::runApp('Developing-Data-Products-Project')
shiny::runApp('Developing-Data-Products-Project')
shiny::runApp('Developing-Data-Products-Project')
shiny::runApp('Developing-Data-Products-Project')
?pt
shiny::runApp('Developing-Data-Products-Project')
shiny::runApp('Developing-Data-Products-Project')
shiny::runApp('Developing-Data-Products-Project')
shiny::runApp('Developing-Data-Products-Project')
shiny::runApp('Developing-Data-Products-Project')
shiny::runApp('Developing-Data-Products-Project')
shiny::runApp('Developing-Data-Products-Project')
shiny::runApp('Developing-Data-Products-Project')
shiny::runApp('Developing-Data-Products-Project')
?inter
?interest
shiny::runApp('Developing-Data-Products-Project')
shiny::runApp('Developing-Data-Products-Project')
shiny::runApp('Developing-Data-Products-Project')
shiny::runApp('Developing-Data-Products-Project')
shiny::runApp('Developing-Data-Products-Project')
shiny::runApp('Developing-Data-Products-Project')
shiny::runApp('Developing-Data-Products-Project')
shiny::runApp('Developing-Data-Products-Project')
shiny::runApp('Developing-Data-Products-Project')
shiny::runApp('Developing-Data-Products-Project')
shiny::runApp('Developing-Data-Products-Project')
shiny::runApp('Developing-Data-Products-Project')
shiny::runApp('Developing-Data-Products-Project')
shiny::runApp('Developing-Data-Products-Project')
shiny::runApp('Developing-Data-Products-Project')
There are many future applications that could add complexity and options to this payment calculator, which may be interesting to explore.
setwd("./Machine-Learning-Project")
training <- read.csv("training.csv", na.strings = c("NA", ""))
cleanTrain <- training[!colSums(is.na(training)) >= 19216]
cleanTrain <- cleanTrain[,8:60]
crossVal <- createDataPartition(y = cleanTrain$classe, p = 0.60, list = FALSE)
train <- cleanTrain[crossVal,]
val <- cleanTrain[-crossVal,]
library(caret)
crossVal <- createDataPartition(y = cleanTrain$classe, p = 0.60, list = FALSE)
train <- cleanTrain[crossVal,]
val <- cleanTrain[-crossVal,]
modFit <- randomForest(classe ~ ., data = train)
library(randomForest)
modFit <- randomForest(classe ~ ., data = train)
modFit$oob
modFit$OOB
modFit
modFit$err.rate
modFit$err.rate[modFit$ntree, "OOB"]
