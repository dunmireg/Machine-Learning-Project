shiny::runApp('Developing-Data-Products-Project')
(19800 - 20000)/(1750/sqrt(14))
xbar = 19800
H0 = 20000
s = 14
n = 1750
tStat <- (xbar - H0)/(s/sqrt(n))
xbar = 19800
H0 = 20000
s = 1750
n = 14
tStat <- (xbar - H0)/(s/sqrt(n))
shiny::runApp('Developing-Data-Products-Project')
shiny::runApp('Developing-Data-Products-Project')
shiny::runApp('Developing-Data-Products-Project')
shiny::runApp('Developing-Data-Products-Project')
shiny::runApp('Developing-Data-Products-Project')
shiny::runApp('Developing-Data-Products-Project')
shiny::runApp('Developing-Data-Products-Project')
shiny::runApp('Developing-Data-Products-Project')
?pt
shiny::runApp('Developing-Data-Products-Project')
shiny::runApp('Developing-Data-Products-Project')
shiny::runApp('Developing-Data-Products-Project')
shiny::runApp('Developing-Data-Products-Project')
shiny::runApp('Developing-Data-Products-Project')
shiny::runApp('Developing-Data-Products-Project')
shiny::runApp('Developing-Data-Products-Project')
shiny::runApp('Developing-Data-Products-Project')
shiny::runApp('Developing-Data-Products-Project')
?inter
?interest
shiny::runApp('Developing-Data-Products-Project')
shiny::runApp('Developing-Data-Products-Project')
shiny::runApp('Developing-Data-Products-Project')
shiny::runApp('Developing-Data-Products-Project')
shiny::runApp('Developing-Data-Products-Project')
shiny::runApp('Developing-Data-Products-Project')
shiny::runApp('Developing-Data-Products-Project')
shiny::runApp('Developing-Data-Products-Project')
shiny::runApp('Developing-Data-Products-Project')
shiny::runApp('Developing-Data-Products-Project')
shiny::runApp('Developing-Data-Products-Project')
shiny::runApp('Developing-Data-Products-Project')
shiny::runApp('Developing-Data-Products-Project')
shiny::runApp('Developing-Data-Products-Project')
shiny::runApp('Developing-Data-Products-Project')
There are many future applications that could add complexity and options to this payment calculator, which may be interesting to explore.
setwd("./Machine-Learning-Project/Submission")
ls()
if(!file.exists("testing.csv")) {
download.file("http://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv", "testing.csv")
}
ls()
testing <- read.csv("testing.csv")
if(!file.exists("training.csv")) {
download.file("http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv", "training.csv")
}
training <- read.csv("training.csv", na.strings = c("NA", ""))
cleanTrain <- training[!colSums(is.na(training)) >= 19216]
cleanTrain <- cleanTrain[,8:60]
library(caret)
crossVal <- createDataPartition(y = cleanTrain$classe, p = 0.60, list = FALSE)
train <- cleanTrain[crossVal,]
val <- cleanTrain[-crossVal,]
library(randomForest)
modFit <- randomForest(classe ~ ., data = train)
modFit
pred <- predict(modFit, testing)
pred <- as.character(pred)
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(pred)
pred
?confusionMatrix
pred <- predict(modFit, val)
confusionMatrix(pred, val$classe)
confusionMatrix(pred, val$classe)$overall
confusionMatrix(pred, val$classe)$overall[1]
confusionMatrix(pred, val$classe)$overall[[1]]
